// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rho_func
arma::vec rho_func(arma::vec res, double b);
RcppExport SEXP _srlmcell_rho_func(SEXP resSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rho_func(res, b));
    return rcpp_result_gen;
END_RCPP
}
// psi_func
arma::vec psi_func(arma::vec res, double b);
RcppExport SEXP _srlmcell_psi_func(SEXP resSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(psi_func(res, b));
    return rcpp_result_gen;
END_RCPP
}
// diff_func
arma::vec diff_func(arma::vec res, double b);
RcppExport SEXP _srlmcell_diff_func(SEXP resSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_func(res, b));
    return rcpp_result_gen;
END_RCPP
}
// scale_func
double scale_func(arma::vec res, double b, double delta, double sigmahat);
RcppExport SEXP _srlmcell_scale_func(SEXP resSEXP, SEXP bSEXP, SEXP deltaSEXP, SEXP sigmahatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type sigmahat(sigmahatSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_func(res, b, delta, sigmahat));
    return rcpp_result_gen;
END_RCPP
}
// soft_threshold
arma::vec soft_threshold(arma::vec betahat, arma::vec Alambda);
RcppExport SEXP _srlmcell_soft_threshold(SEXP betahatSEXP, SEXP AlambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Alambda(AlambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_threshold(betahat, Alambda));
    return rcpp_result_gen;
END_RCPP
}
// TukeyM_atan
List TukeyM_atan(arma::vec y, arma::mat x, arma::vec betahat, double sigmahat, double lambda, String reg, double gamma, double maxiter);
RcppExport SEXP _srlmcell_TukeyM_atan(SEXP ySEXP, SEXP xSEXP, SEXP betahatSEXP, SEXP sigmahatSEXP, SEXP lambdaSEXP, SEXP regSEXP, SEXP gammaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< double >::type sigmahat(sigmahatSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< String >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(TukeyM_atan(y, x, betahat, sigmahat, lambda, reg, gamma, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// TukeyM_atan_iter
List TukeyM_atan_iter(arma::vec y, arma::mat x, arma::mat ximp, arma::vec betahat, double sigmahat, String tech, double lambda, String reg, double gamma, double b, double maxiter);
RcppExport SEXP _srlmcell_TukeyM_atan_iter(SEXP ySEXP, SEXP xSEXP, SEXP ximpSEXP, SEXP betahatSEXP, SEXP sigmahatSEXP, SEXP techSEXP, SEXP lambdaSEXP, SEXP regSEXP, SEXP gammaSEXP, SEXP bSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ximp(ximpSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< double >::type sigmahat(sigmahatSEXP);
    Rcpp::traits::input_parameter< String >::type tech(techSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< String >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(TukeyM_atan_iter(y, x, ximp, betahat, sigmahat, tech, lambda, reg, gamma, b, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// lambdamax_matan
List lambdamax_matan(arma::vec y, arma::mat x, arma::vec betahat, double sigmahat, String reg, double lambdamax);
RcppExport SEXP _srlmcell_lambdamax_matan(SEXP ySEXP, SEXP xSEXP, SEXP betahatSEXP, SEXP sigmahatSEXP, SEXP regSEXP, SEXP lambdamaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< double >::type sigmahat(sigmahatSEXP);
    Rcpp::traits::input_parameter< String >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type lambdamax(lambdamaxSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdamax_matan(y, x, betahat, sigmahat, reg, lambdamax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_srlmcell_rho_func", (DL_FUNC) &_srlmcell_rho_func, 2},
    {"_srlmcell_psi_func", (DL_FUNC) &_srlmcell_psi_func, 2},
    {"_srlmcell_diff_func", (DL_FUNC) &_srlmcell_diff_func, 2},
    {"_srlmcell_scale_func", (DL_FUNC) &_srlmcell_scale_func, 4},
    {"_srlmcell_soft_threshold", (DL_FUNC) &_srlmcell_soft_threshold, 2},
    {"_srlmcell_TukeyM_atan", (DL_FUNC) &_srlmcell_TukeyM_atan, 8},
    {"_srlmcell_TukeyM_atan_iter", (DL_FUNC) &_srlmcell_TukeyM_atan_iter, 11},
    {"_srlmcell_lambdamax_matan", (DL_FUNC) &_srlmcell_lambdamax_matan, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_srlmcell(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
