// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// threshold_vec
arma::vec threshold_vec(arma::vec xvec, arma::vec lambdavec, bool soft);
RcppExport SEXP _regcell_threshold_vec(SEXP xvecSEXP, SEXP lambdavecSEXP, SEXP softSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdavec(lambdavecSEXP);
    Rcpp::traits::input_parameter< bool >::type soft(softSEXP);
    rcpp_result_gen = Rcpp::wrap(threshold_vec(xvec, lambdavec, soft));
    return rcpp_result_gen;
END_RCPP
}
// threshold_mat
arma::mat threshold_mat(arma::mat xmat, arma::mat lambdamat, bool soft);
RcppExport SEXP _regcell_threshold_mat(SEXP xmatSEXP, SEXP lambdamatSEXP, SEXP softSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambdamat(lambdamatSEXP);
    Rcpp::traits::input_parameter< bool >::type soft(softSEXP);
    rcpp_result_gen = Rcpp::wrap(threshold_mat(xmat, lambdamat, soft));
    return rcpp_result_gen;
END_RCPP
}
// threshold_svd
arma::mat threshold_svd(arma::mat x, arma::vec lambdavec, bool soft);
RcppExport SEXP _regcell_threshold_svd(SEXP xSEXP, SEXP lambdavecSEXP, SEXP softSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdavec(lambdavecSEXP);
    Rcpp::traits::input_parameter< bool >::type soft(softSEXP);
    rcpp_result_gen = Rcpp::wrap(threshold_svd(x, lambdavec, soft));
    return rcpp_result_gen;
END_RCPP
}
// rob_pca
List rob_pca(arma::mat x, arma::mat xc, arma::mat delta, double lambda, int maxiter);
RcppExport SEXP _regcell_rob_pca(SEXP xSEXP, SEXP xcSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xc(xcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(rob_pca(x, xc, delta, lambda, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// reg_beta
List reg_beta(arma::vec y, arma::mat x, arma::vec betahat, double intercept, arma::vec alambdavec_beta, bool softbeta, double maxiterbeta);
RcppExport SEXP _regcell_reg_beta(SEXP ySEXP, SEXP xSEXP, SEXP betahatSEXP, SEXP interceptSEXP, SEXP alambdavec_betaSEXP, SEXP softbetaSEXP, SEXP maxiterbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alambdavec_beta(alambdavec_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type softbeta(softbetaSEXP);
    Rcpp::traits::input_parameter< double >::type maxiterbeta(maxiterbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(reg_beta(y, x, betahat, intercept, alambdavec_beta, softbeta, maxiterbeta));
    return rcpp_result_gen;
END_RCPP
}
// reg_delta
List reg_delta(arma::vec y, arma::mat x, arma::vec betahat, arma::mat deltahat, arma::mat alambdamat_delta, double alpha, bool softdelta, double maxiterdelta);
RcppExport SEXP _regcell_reg_delta(SEXP ySEXP, SEXP xSEXP, SEXP betahatSEXP, SEXP deltahatSEXP, SEXP alambdamat_deltaSEXP, SEXP alphaSEXP, SEXP softdeltaSEXP, SEXP maxiterdeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type deltahat(deltahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alambdamat_delta(alambdamat_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type softdelta(softdeltaSEXP);
    Rcpp::traits::input_parameter< double >::type maxiterdelta(maxiterdeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(reg_delta(y, x, betahat, deltahat, alambdamat_delta, alpha, softdelta, maxiterdelta));
    return rcpp_result_gen;
END_RCPP
}
// reg_beta_delta
List reg_beta_delta(arma::vec y, arma::mat x, arma::vec betahat, double intercept, arma::mat deltahat, arma::mat cellweight, double lambda_beta, bool softbeta, double lambda_delta, bool softdelta, double alpha, double maxiter);
RcppExport SEXP _regcell_reg_beta_delta(SEXP ySEXP, SEXP xSEXP, SEXP betahatSEXP, SEXP interceptSEXP, SEXP deltahatSEXP, SEXP cellweightSEXP, SEXP lambda_betaSEXP, SEXP softbetaSEXP, SEXP lambda_deltaSEXP, SEXP softdeltaSEXP, SEXP alphaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type deltahat(deltahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cellweight(cellweightSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_beta(lambda_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type softbeta(softbetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_delta(lambda_deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type softdelta(softdeltaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(reg_beta_delta(y, x, betahat, intercept, deltahat, cellweight, lambda_beta, softbeta, lambda_delta, softdelta, alpha, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regcell_threshold_vec", (DL_FUNC) &_regcell_threshold_vec, 3},
    {"_regcell_threshold_mat", (DL_FUNC) &_regcell_threshold_mat, 3},
    {"_regcell_threshold_svd", (DL_FUNC) &_regcell_threshold_svd, 3},
    {"_regcell_rob_pca", (DL_FUNC) &_regcell_rob_pca, 5},
    {"_regcell_reg_beta", (DL_FUNC) &_regcell_reg_beta, 7},
    {"_regcell_reg_delta", (DL_FUNC) &_regcell_reg_delta, 8},
    {"_regcell_reg_beta_delta", (DL_FUNC) &_regcell_reg_beta_delta, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_regcell(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
