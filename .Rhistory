rst = list()
for (mtd in 1:length(mtds)) {
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
TPD = sum(fit$flagger[which(outlierlabel==1)] == outlierlabel[which(outlierlabel==1)])/sum(outlierlabel==1)
TND = sum(fit$flagger[which(outlierlabel==0)] == outlierlabel[which(outlierlabel==0)])/sum(outlierlabel==0)
mape = mean(abs(ynew - cbind(1,xc)%*%betahat))
rtmspe = sqrt(mean(((ynew - cbind(1,xc)%*%betahat)^2)[1:(0.8*n)]))
rst[[mtd]] = c(m = m, n = n, p = p, pr = pr, e = e, r = r, gamma = gamma, outtype = outtype, df = df,
method = names(mtds)[mtd], seed =seed, TPD = TPD, TND = TND,
MAPE = mape, RTMSPE = rtmspe, Time = timing, betahat = betahat)
}
rst
result1[max(result1$MAPE),]
result1[which.max(result1$MAPE),]
?bodyfat
??bodyfat
library(mplot)
library(mplot)
# rm(list = ls()) # clean slate
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(tidyverse)
library(robustHD) #sparse LTS
library(cellWise)
library(corrplot)
library(mplot)
# rm(list = ls()) # clean slate
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
?bodyfat
Bodyfat = bodyfat
dat = bodyfat
dat$Id = NULL
dim(dat)
fit1 <- DDC(dat)
p1 = cellMap(fit1$remX, fit1$stdResid, columnlabels = c(1,rep(" ",12),14), rowlabels = c(1,rep(" ",126),128), columnangle = 0,
rowtitle = "Observations", columntitle = "Genes", sizetitles = 2,adjustrowlabels = 0.5, adjustcolumnlabels = 0.5)+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=12))
p1
fit1 <- DDC(dat)
p1 = cellMap(fit1$remX, fit1$stdResid, columnlabels = c(1,rep(" ",12),14), rowlabels = c(1,rep(" ",126),128), columnangle = 0,
rowtitle = "Observations", columntitle = "Genes", sizetitles = 2,adjustrowlabels = 0.5, adjustcolumnlabels = 0.5)+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=12))
p1
library(tidyverse)
library(robustHD) #sparse LTS
library(cellWise)
library(corrplot)
library(mplot)
library(GGally)
# rm(list = ls()) # clean slate
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
GGally::ggpairs(dat) + theme_bw()
GGally::ggpairs(dat[,1:6]) + theme_bw()
{
smrlarsrowf    = function(y, x){srlmcell::srlmm(y,x, tech = "row",   initial = "rlars")}
smrlarscellf   = function(y, x){srlmcell::srlmm(y,x, tech = "cell",  initial = "rlars")}
smddcrowf    = function(y, x){srlmcell::srlmm(y,x, tech = "row",   initial = "ddc")}
smddccellf   = function(y, x){srlmcell::srlmm(y,x, tech = "cell",  initial = "ddc")}
mtds = list(
smrlarsrow    = smrlarsrowf,
smrlarscell   = smrlarscellf,
smddcrow    = smddcrowf,
smddccell   = smddccellf
)
}
x = dat[,-1]
View(x)
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = dat[,-1]
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
TPD = sum(fit$flagger[which(outlierlabel==1)] == outlierlabel[which(outlierlabel==1)])/sum(outlierlabel==1)
TND = sum(fit$flagger[which(outlierlabel==0)] == outlierlabel[which(outlierlabel==0)])/sum(outlierlabel==0)
mape = mean(abs(ynew - cbind(1,xc)%*%betahat))
rtmspe = sqrt(mean(((ynew - cbind(1,xc)%*%betahat)^2)[1:(0.8*n)]))
rst[[mtd]] = c(m = m, n = n, p = p, pr = pr, e = e, r = r, gamma = gamma, outtype = outtype, df = df,
method = names(mtds)[mtd], seed =seed, TPD = TPD, TND = TND,
MAPE = mape, RTMSPE = rtmspe, Time = timing, betahat = betahat)
}
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
TPD = sum(fit$flagger[which(outlierlabel==1)] == outlierlabel[which(outlierlabel==1)])/sum(outlierlabel==1)
TND = sum(fit$flagger[which(outlierlabel==0)] == outlierlabel[which(outlierlabel==0)])/sum(outlierlabel==0)
mape = mean(abs(ynew - cbind(1,xc)%*%betahat))
rtmspe = sqrt(mean(((ynew - cbind(1,xc)%*%betahat)^2)[1:(0.8*n)]))
rst[[mtd]] = c(m = m, n = n, p = p, pr = pr, e = e, r = r, gamma = gamma, outtype = outtype, df = df,
method = names(mtds)[mtd], seed =seed, TPD = TPD, TND = TND,
MAPE = mape, RTMSPE = rtmspe, Time = timing, betahat = betahat)
}
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
mtd
betahat = fit$betahat
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], Time = timing, betahat = betahat)
}
rst
as.data.frame(rst)
t(as.data.frame(rst))
as.data.frame(t(as.data.frame(rst)))
fit1 = shootings::sparseshooting(x,y)
fit$betahat
dim(x)
fit$betahat
step(y~x)
?step
fit = lm(y~x)
step(fit)
y = dat$Bodyfat
x = dat[,-1]
fit = lm(y~x)
fit = lm(y~.,dat)
step(fit)
fit = lm(Bodyfat~.,dat)
step(fit)
View(dat)
?rlars
rlars(x,y)
fit2 = rlars(x,y)
fit2$coefficients
library(tidyverse)
library(robustHD) #sparse LTS
library(cellWise)
library(corrplot)
library(mplot)
library(GGally)
library(srlmcell)
# rm(list = ls()) # clean slate
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
fit2 = srlmcell::Rlars(y,x)
fit2$betahat
fit = suppressWarnings(robustHD::rlars(x,y))
fit$crit
fit = lm(Bodyfat~.,dat)
step(fit)
step(fit,trace = F)
fit = lm(Bodyfat~.,dat)
step(fit,trace = F)
fit2 = srlmcell::Rlars(y,x)
fit2$betahat
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], Time = timing, betahat = betahat)
}
as.data.frame(t(as.data.frame(rst)))
fit1 = shootings::sparseshooting(x,y)
fit$betahat
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], Time = timing, betahat = betahat)
}
rst = as.data.frame(t(as.data.frame(rst)))
rownames(rst) = NULL
rst
names(dat)
colnames(rst) = names(dat)[-1]
rst
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], Time = timing, betahat = betahat)
}
rst = as.data.frame(t(as.data.frame(rst)))
rownames(rst) = NULL
colnames(rst)[-1] = names(dat)[-1]
rst
rst = list()
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], Time = timing, betahat = betahat)
}
for (mtd in 1:length(mtds)) {
y = dat$Bodyfat
x = as.matrix(dat[,-1])
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], Time = timing, betahat = betahat)
}
rst = as.data.frame(t(as.data.frame(rst)))
rst = as.data.frame(t(as.data.frame(rst)))
rownames(rst) = NULL
colnames(rst)
rst
rst = as.data.frame(t(as.data.frame(rst)))
rownames(rst) = NULL
rst
dim(x)
colnames(rst)[-1] = c("method", "time", "beta0",names(dat)[-1]  )
colnames(rst) = c("method", "time", "beta0",names(dat)[-1]  )
rst
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F )
library(tidyverse)
library(usethis)
library(robustHD) #sparse LTS
library(cellWise)
library(corrplot)
library(mplot)
library(GGally)
library(srlmcell)
rst = list()
xtilderst = list()
for (mtd in 1:length(mtds)) {
dat = diabetes
dat$sex = NULL
x = as.matrix(dat[,-10])
y = dat$y
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], betahat = betahat)
xtilderst[[mtd]] = fit$flagger
}
rst = as.data.frame(t(as.data.frame(rst)))
rownames(rst) = NULL
colnames(rst) = c("method", "beta0",names(dat)[-1]  )
dat = diabetes
dat$sex = NULL
x = dat[,-10]
y = dat$y
#fit1 = shootings::sparseshooting(x,y)
#fit1$coef_ln
fit2 = srlmcell::Rlars(y,x)
fit2$betahat
#sss = c("shootings", fit1$coef_ln)
rlars = c("rlars", fit2$betahat)
rstnew = rbind(rst,  rlars)
rstnew %>% mutate(across(beta0:Wrist, as.numeric)) %>% knitr::kable(digits = 2)
rst = list()
xtilderst = list()
for (mtd in 1:length(mtds)) {
dat = diabetes
dat$sex = NULL
x = as.matrix(dat[,-10])
y = dat$y
timing  = system.time({fit = mtds[[mtd]](y,x)})["elapsed"]
betahat = fit$betahat
rst[[mtd]] = c(method = names(mtds)[mtd], betahat = betahat)
xtilderst[[mtd]] = fit$flagger
}
rst = as.data.frame(t(as.data.frame(rst)))
rownames(rst) = NULL
colnames(rst) = c("method", "beta0",names(dat)[-1]  )
colnames(rst) = c("method", "beta0",names(dat)[-10]  )
rst
dat = diabetes
dat$sex = NULL
x = dat[,-10]
y = dat$y
#fit1 = shootings::sparseshooting(x,y)
#fit1$coef_ln
fit2 = srlmcell::Rlars(y,x)
fit2$betahat
#sss = c("shootings", fit1$coef_ln)
rlars = c("rlars", fit2$betahat)
rstnew = rbind(rst,  rlars)
rstnew %>% mutate(across(beta0:glu, as.numeric)) %>% knitr::kable(digits = 2)
p2 = cellMap(x, 10*xtilderst[[1]], columnlabels = c(1,rep(" ",11),13), rowlabels = c(442,rep(" ",440),1), columnangle = 0,
rowtitle = "Observations", columntitle = "Variables", sizetitles = 2,adjustrowlabels = 0.5, adjustcolumnlabels = 0.5)+
coord_flip()+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=12))
p2 = cellMap(x, 10*xtilderst[[1]], columnlabels = c(1,rep(" ",8),9), rowlabels = c(442,rep(" ",440),1), columnangle = 0,
rowtitle = "Observations", columntitle = "Variables", sizetitles = 2,adjustrowlabels = 0.5, adjustcolumnlabels = 0.5)+
coord_flip()+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=12))
dim(x)
dat = bodyfat
dat$Id = NULL
x = dat[,-1]
#GGally::ggpairs(dat[,1:6]) + theme_bw()
fit1 <- DDC(x)
fit1$Ximp
{
m = 1
n = 100
p = 20
pr = 10
e = 0
r = 0.5
gamma = 6
df = 0
outtype = "structured"
}
##### methods
{
sssf = function(y, x){shootings::sparseshooting(x,y)$coef_ln}
rlarsf = function(y, x){srlmcell::Rlars(y, x)$betahat}
smddcrowf    = function(y, x){srlmcell::srlmm(y, x, tech = "row",   initial = "ddc"  , crit = "bic")$betahat}
smrlarsrowf  = function(y, x){srlmcell::srlmm(y, x, tech = "row",   initial = "rlars", crit = "bic")$betahat}
smddccellf   = function(y, x){srlmcell::srlmm(y, x, tech = "cell",  initial = "ddc"  , crit = "bic")$betahat}
smrlarscellf = function(y, x){srlmcell::srlmm(y, x, tech = "cell",  initial = "rlars", crit = "bic")$betahat}
smddcrowebicf    = function(y, x){srlmcell::srlmm(y, x, tech = "row",   initial = "ddc"  , crit = "ebic")$betahat}
smrlarsrowebicf  = function(y, x){srlmcell::srlmm(y, x, tech = "row",   initial = "rlars", crit = "ebic")$betahat}
smddccellebicf   = function(y, x){srlmcell::srlmm(y, x, tech = "cell",  initial = "ddc"  , crit = "ebic")$betahat}
smrlarscellebicf = function(y, x){srlmcell::srlmm(y, x, tech = "cell",  initial = "rlars", crit = "ebic")$betahat}
mtds = list(
#sss = sssf,
rlars = rlarsf,
#smddcrow    = smddcrowf,
#smrlarsrow  = smrlarsrowf,
#smddccell   = smddccellf,
#smrlarscell = smrlarscellf,
#smddcrowebic    = smddcrowebicf,
smrlarsrowebic  = smrlarsrowebicf,
#smddccellebic   = smddccellebicf,
smrlarscellebic = smrlarscellebicf
)
}
{
seed = m
set.seed(seed = seed)
beta = c(rep(1,pr),rep(0,p-pr))
dataset = srlmcell::genevar(n = n, p = p, e = e, r = r, beta = beta, gamma = gamma, df = df, outtype = outtype)
x  = dataset$x
xc = dataset$xc
y  = dataset$y
ynew = dataset$ynew
#outlierlabel = dataset$outlierlabel
}
rst = list()
for (mtd in 1:length(mtds)) {
timing  = system.time({betahat = mtds[[mtd]](y,x)})["elapsed"]
mape = mean(abs(ynew - cbind(1,xc)%*%betahat))
rtmspe = sqrt(mean(((ynew - cbind(1,xc)%*%betahat)^2)[1:(0.8*n)]))
tpf<-function(betahat, beta){sum((as.logical(betahat)==as.logical(beta))[1:pr])}
tnf<-function(betahat,beta){sum((as.logical(betahat)==as.logical(beta))[-(1:pr)])}
tp = tpf(betahat[-1], beta)
tn = tnf(betahat[-1], beta)
rst[[mtd]] = c(m = m, n = n, p = p, pr = pr, e = e, r = r, gamma = gamma, outtype = outtype, df = df,
method = names(mtds)[mtd], seed =seed,
MAPE = mape, RTMSPE = rtmspe, TP = tp, FP = (p-pr)-tn, betahat[2:6], Time = timing)
}
rst
load("result_regression_p20_structured2.RData")
load("result_simu_p20_structured2.RData")
#assign('result111', get(load('result_simu_p200_new2.RData')))
result1 = as.data.frame(t(as.data.frame(result)))
result1 = result1 %>% mutate(across(c(1:4, 12:21), as.numeric),
across(5:11, as.factor),
bacc = (tp/pr + (p-pr-fp)/(p-pr))/2)
library(tidyverse)
library(gridExtra)
library(grid)
library(plotly)
library(stargazer)
options(show.error.locations = TRUE)
load("result_simu_p20_structured2.RData")
#assign('result111', get(load('result_simu_p200_new2.RData')))
result1 = as.data.frame(t(as.data.frame(result)))
result1 = result1 %>% mutate(across(c(1:4, 12:21), as.numeric),
across(5:11, as.factor),
bacc = (tp/pr + (p-pr-fp)/(p-pr))/2)
load("result_simu_p20_structured2.RData")
#assign('result111', get(load('result_simu_p200_new2.RData')))
result1 = as.data.frame(t(as.data.frame(result)))
result1 = result1 %>% mutate(across(c(1:4, 12:21), as.numeric),
across(5:11, as.factor),
bacc = (TP/pr + (p-pr-FP)/(p-pr))/2)
#glimpse(result1)
#result1$fp = result1$fp-5
levels(result1$e) = c("e = 0%", "e = 2%", "e = 5%", "e = 10%")
levels(result1$df) = c( "Normal","t(3)", "t(5)")
levels(result1$gamma) = c( "2", "4", "6", "8", "10", " ")
result1$df = factor(result1$df, levels = c("t(3)", "t(5)", "Normal"))
#result1$method = factor(result1$method, levels = c("sss",   "rlars", "smddcrow", "smddccell", "smrlarsrow", "smrlarscell"))
#result1$method = factor(result1$method, levels = c("Sparse_Shooting_S",   "Robust_Lars", "Sparse_M_DDC", "Sparse_M_Rlars"))
#result1$method = factor(result1$method, labels = c("sShootS",   "Rlars", "srlm_ddc", "srlm_rlars") )
#result1 = result1%>% mutate(
#  e  = factor(e, labels = c("e = 0%", "e = 2%", "e = 5%", "e = 10%")),
#  df = factor(df, labels = c("Normal", "t(3)")),
#  method = factor(method, levels = c("Sparse_Shooting_S",   "Robust_Lars", "Sparse_M_DDC", "Sparse_M_Rlars"),
#                  labels = c("sShootS",   "Rlars", "srlm_ddc", "srlm_rlars"))
#)
result2 = result1
result2[(result2$e=="e = 0%")&(result2$gamma!="2"),]=NA
result2 = result2[complete.cases(result2),]
result2$gamma[result2$e=="e = 0%"] = " "
names(result2)[c(12:15,21,22)] = c("MAPE", "RTMSPE", "TP", "FP", "Time", "BACC")
summary = result2 %>% group_by(n,p,e,r,gamma, df, method) %>% summarise(
TPR = mean(TP/5, na.rm = T),
FPR = mean(FP/(p-5), na.rm = T),
TNR = 1-FPR,
BACC = (TPR + TNR)/2,
MAPE = mean(MAPE),
RTMSPE = mean(RTMSPE),
Time = mean(Time))
summary[c(8,9,11,14)] = round(summary[c(8,9,11,14)],3)
out = as.character(summary[c(3,6,7,8,9,11,14)])
#result2[which.max(result2$rtmspe),]
result3 = result2 %>% filter(df == "Normal")
p1 = ggplot(data = result3)+
geom_boxplot(aes(fill = method, x = gamma, y = MAPE))+
facet_grid(outtype~e, scales = "free", space = "free_x") +
#scale_y_continuous(limits = quantile(result3$MAPE, c(0.1, 0.8)))+
theme_bw()+
labs(x = expression(gamma*": magnitude of outlyingness"))+
theme(text= element_text(size=12),
#axis.text.x = element_blank(),
legend.position = "right")
p1
#plotly::ggplotly(p1)
#ggsave("plots_time_p200.eps", plot = p1, width = 10,height = 7)
#result2[which.max(result2$rtmspe),]
result3 = result2 %>% filter(df == "Normal")
p1 = ggplot(data = result3)+
geom_boxplot(aes(fill = method, x = gamma, y = MAPE))+
facet_grid(outtype~e, scales = "free", space = "free_x") +
#scale_y_continuous(limits = quantile(result3$MAPE, c(0.1, 0.8)))+
theme_bw()+
labs(x = expression(gamma*": magnitude of outlyingness"))+
theme(text= element_text(size=12),
#axis.text.x = element_blank(),
legend.position = "right")
p1
#plotly::ggplotly(p1)
#ggsave("plots_time_p200.eps", plot = p1, width = 10,height = 7)
load("result_simu_p20_structured2.RData")
#assign('result111', get(load('result_simu_p200_new2.RData')))
result1 = as.data.frame(t(as.data.frame(result)))
result1 = result1 %>% mutate(across(c(1:4, 12:21), as.numeric),
across(5:11, as.factor),
bacc = (TP/pr + (p-pr-FP)/(p-pr))/2)
#glimpse(result1)
#result1$fp = result1$fp-5
levels(result1$e) = c("e = 0%", "e = 2%", "e = 5%", "e = 10%")
levels(result1$df) = c( "Normal","t(3)", "t(5)")
levels(result1$gamma) = c( "2", "4", "6", "8", "10", " ")
result1$df = factor(result1$df, levels = c("t(3)", "t(5)", "Normal"))
#result1$method = factor(result1$method, levels = c("sss",   "rlars", "smddcrow", "smddccell", "smrlarsrow", "smrlarscell"))
#result1$method = factor(result1$method, levels = c("Sparse_Shooting_S",   "Robust_Lars", "Sparse_M_DDC", "Sparse_M_Rlars"))
#result1$method = factor(result1$method, labels = c("sShootS",   "Rlars", "srlm_ddc", "srlm_rlars") )
#result1 = result1%>% mutate(
#  e  = factor(e, labels = c("e = 0%", "e = 2%", "e = 5%", "e = 10%")),
#  df = factor(df, labels = c("Normal", "t(3)")),
#  method = factor(method, levels = c("Sparse_Shooting_S",   "Robust_Lars", "Sparse_M_DDC", "Sparse_M_Rlars"),
#                  labels = c("sShootS",   "Rlars", "srlm_ddc", "srlm_rlars"))
#)
result2 = result1
result2[(result2$e=="e = 0%")&(result2$gamma!="2"),]=NA
result2 = result2[complete.cases(result2),]
result2$gamma[result2$e=="e = 0%"] = " "
names(result2)[c(12:15,21,22)] = c("MAPE", "RTMSPE", "TP", "FP", "Time", "BACC")
result_new= result2
save(result_new, file = "result_simu_new_cleaned.RData")
load("result_simu_new_cleaned.RData")
#result_high$method %in% c("sss",   "rlars", "smddcrow", "smddccell", "smrlarsrow", "smrlarscell")
#result2[which.max(result2$rtmspe),]
result3 = result2 %>% filter(df == "Normal")
p1 = ggplot(data = result3)+
geom_boxplot(aes(fill = method, x = gamma, y = MAPE))+
facet_grid(outtype~e, scales = "free", space = "free_x") +
#scale_y_continuous(limits = quantile(result3$MAPE, c(0.1, 0.8)))+
theme_bw()+
labs(x = expression(gamma*": magnitude of outlyingness"))+
theme(text= element_text(size=12),
#axis.text.x = element_blank(),
legend.position = "right")
p1
#plotly::ggplotly(p1)
#ggsave("plots_time_p200.eps", plot = p1, width = 10,height = 7)
result_new= result2
save(result_new, file = "result_simu_new_cleaned.RData")
load("result_simu_new_cleaned.RData")
#result_high$method %in% c("sss",   "rlars", "smddcrow", "smddccell", "smrlarsrow", "smrlarscell")
result_new= result2
save(result_new, file = "result_simu_new_cleaned.RData")
load("result_simu_new_cleaned.RData")
#result_high$method %in% c("sss",   "rlars", "smddcrow", "smddccell", "smrlarsrow", "smrlarscell")
