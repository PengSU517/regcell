[{"path":"https://pengsu517.github.io/regcell/articles/demo.html","id":"a-simulated-dataset","dir":"Articles","previous_headings":"","what":"A simulated dataset","title":"demo","text":"","code":"set.seed(1234) dat = regcell::genevar(n = 200, p = 50, e = 0.05, sigma = 3)  y = dat$y x = dat$x"},{"path":"https://pengsu517.github.io/regcell/articles/demo.html","id":"outlier-detection","dir":"Articles","previous_headings":"A simulated dataset","what":"Outlier detection","title":"demo","text":"Detect outliers using DDC (Rousseeuw Van Den Bossche, 2018).","code":"fit1 <- cellWise::DDC(x) #>   #>  The input data has 200 rows and 50 columns. p1 = cellWise::cellMap(fit1$stdResid, columnlabels = c(1,rep(\" \",dim(x)[2]-2),dim(x)[2]), rowlabels = c(1,rep(\" \",dim(x)[1]-2),dim(x)[1]), columnangle = 0,         rowtitle = \"Observations\", columntitle = \"Variables\", sizetitles = 2,adjustrowlabels = 0.5, adjustcolumnlabels = 0.5)+    theme(axis.text.x = element_text(size = 12),         axis.text.y = element_text(size = 12),         axis.title.x = element_text(size = 14),         axis.title.y = element_text(size = 14),         legend.title = element_text(size=14), #change legend title font size         legend.text = element_text(size=12)) +   coord_flip() p1"},{"path":"https://pengsu517.github.io/regcell/articles/demo.html","id":"model-training","dir":"Articles","previous_headings":"A simulated dataset","what":"Model training","title":"demo","text":"Create training set testing set. Fit models using training set calculate prediction errors testing set. Show distribution prediction errors.","code":"set.seed(1234) inTrain <- caret::createDataPartition(y, p = 0.7)[[1]]   ytrain = y[inTrain] xtrain = x[inTrain,]  ytest = y[-inTrain] xtest = x[-inTrain,] set.seed(1234) #fit a model using CR-Lasso fit0 = sregcell_std(ytrain,xtrain) res = ytest - fit0$intercept_hat - xtest%*%fit0$betahat  #fit a model using RLars fit1 = Rlars(ytrain,xtrain) res2 = ytest - fit1$betahat[1] - xtest%*%fit1$betahat[-1] df = data.frame(res = c(res, res2),                  method = c(rep(\"CR-Lasso\", length(res)),rep(\"RLars\", length(res)) )) boxplot(res~method, outline = FALSE, data = df)"},{"path":"https://pengsu517.github.io/regcell/articles/demo.html","id":"the-bodyfat-dataset","dir":"Articles","previous_headings":"","what":"The Bodyfat dataset","title":"demo","text":"demonstration showcasing comparison methods real dataset.","code":""},{"path":"https://pengsu517.github.io/regcell/articles/demo.html","id":"methods-compared","dir":"Articles","previous_headings":"The Bodyfat dataset","what":"methods compared","title":"demo","text":"Load Bodyfat dataset.","code":"##### methods compared mtds = list(   ## spase shooting S, codes arefrom https://github.com/ineswilms/sparse-shooting-S    ## package is available from https://github.com/PengSU517/shootings   # sss = function(y, x){shootings::sparseshooting(x,y)$coef},      ## Rlars, from package robustHD   rlars = function(y, x){regcell::Rlars(y, x)$betahat},       ## MM-Lasso, from https://github.com/esmucler/mmlasso   # mmlasso = function(y,x){mmlasso::mmlasso(x,y)$coef.MMLasso.ad},       ## sparse LTS, from package robustHD   slts = function(y,x){regcell::SLTS(y,x)$betahat},      ## cellwise regularized Lasso without post regression   cell_lasso = function(y,x){      fit = regcell::sregcell_std(y = y, x = x)     return(c(fit$intercept_hat, fit$betahat))   },    ## cellwise regularized Lasso with post regression   cell_lasso_post = function(y,x){     fit = regcell::sregcell_std(y = y, x = x)     return(c(fit$intercept_hat_post, fit$betahat_post))   },    ## Lasso, from package glmnet   lasso  = function(y,x){      return(regcell::lassocv(y,x)$betahat)   }  ) library(mfp) data(\"bodyfat\") y = bodyfat$brozek x = robustHD::robStandardize(bodyfat[,-c(1:4)]) x = as.matrix(x)"},{"path":"https://pengsu517.github.io/regcell/articles/demo.html","id":"leave-one-out-cross-validation","dir":"Articles","previous_headings":"The Bodyfat dataset","what":"Leave-one-out Cross-Validation","title":"demo","text":"","code":"library(doParallel) result <- foreach(mtd = 1:length(mtds),                   .packages = c(\"robustHD\", \"robustbase\" , \"mmlasso\",\"shootings\", \"cellWise\", \"regcell\", \"mfp\"))%:%   foreach(obs = 1:dim(x)[1])%dopar%{      ###set training sets and testing sets     ytrain = y[-obs]     xtrain = as.matrix(x[-obs,])     ytest = y[obs]     xtest = x[obs,]      # fit models     betahat = mtds[[mtd]](ytrain,xtrain)      #calculate prediction errors     res = ytest - betahat[1] - sum(xtest*betahat[-1])     rst = c(mtd = names(mtds)[mtd], n = obs, res = res)      rst   }   save(result, file = \"result_bodyfat.RData\")"},{"path":"https://pengsu517.github.io/regcell/articles/realdata.html","id":"importing-the-data","dir":"Articles","previous_headings":"","what":"Importing the data","title":"Bone mineral density data","text":"Direct links data files: Normarrayexpressdata.txt.magetab E-MEXP-1618.sdrf.txt","code":"## array expression data ## array expression data expressiondat = readr::read_tsv(\"Normarrayexpressdata.txt.magetab\") |>    t() |>    data.frame() |>    janitor::row_to_names(row_number = 1) |>    tibble::rownames_to_column(var = \"id\") |>    dplyr::mutate(id = readr::parse_number(id)) |>    janitor::clean_names() |>    dplyr::select(-composite_element_ref) |>   mutate(across(.cols = -1, .fns = as.numeric)) |>    mutate(across(.cols = -1, .fns = log))  ### feature dataset featuredat = readr::read_tsv(\"E-MEXP-1618.sdrf.txt\") |>    janitor::clean_names() |>    dplyr::mutate(id = readr::parse_number(source_name)) |>    dplyr::select(id,                 hip_t = characteristics_total_hip_t_score) |> arrange(id) ####sort obs by patient ID  # merged data datall = dplyr::left_join(featuredat, expressiondat,                            by = \"id\") write_rds(datall, file = \"datall.rds\", compress = \"gz\")"},{"path":"https://pengsu517.github.io/regcell/articles/realdata.html","id":"feature-screening","dir":"Articles","previous_headings":"","what":"Feature screening","title":"Bone mineral density data","text":"Given large number variables dataset, pre-screening step implemented identify subset variables correlated outcome interest, total hip T-score. accomplish , first log-transformed predictors utilized robust correlation estimate based winsorization Khan et al. (2007), instead Pearson correlation, since winsorization robust outliers may occur dataset. screened data comprise measurements \\(p = 100\\) genes \\(n = 84\\) Norwegian women. screened data, datascreen.rds, included regcell package. plot shows outlier cell map 100 screened variables 84 Norwegian women using DDC method Rousseeuw & Van Den Bossche (2018). Cells flagged outlying observed predicted values differ much. cells blank, showing detected outliers. red cell means observed value significantly higher predicted value, blue cell means observed value significantly lower.  average, screened genes exhibit contamination rate \\(3.61\\%\\), probe \\(\\textrm{236831\\_at}\\) highest contamination rate \\(9.52\\%\\). Among observations, thirteenth observation patient ID 20 shows highest contamination rate \\(22\\%\\).","code":"datall = readr::read_rds(\"datall.rds\") x = datall |> dplyr::select(-id, -hip_t) |> as.matrix()   y = datall |> dplyr::select(hip_t) |> pull() ## huber correlation corh = apply(x, 2,              FUN = function(xvec){robustHD::corHuber(xvec, y)})  orders = order(abs(corh), decreasing = TRUE) xscreen = (x[,orders])[,1:100] # pairs(cbind(y,xscreen[,1:5])) datascreen = cbind(y, xscreen) rownames(datascreen) = datall$id readr::write_rds(datascreen, file = \"datascreen.rds\") datascreen = read_rds(file = \"datascreen.rds\")  data(datascreen) x = datascreen[,-1] fit1 <- cellWise::DDC(x) #>   #>  The input data has 84 rows and 100 columns. cellWise::cellMap(   fit1$stdResid,   columnlabels = c(1,rep(\" \",dim(x)[2]-2),dim(x)[2]),   rowlabels = c(1,rep(\" \",dim(x)[1]-2),dim(x)[1]),   columnangle = 0,   rowtitle = \"Observations\", columntitle = \"Genes\",   sizetitles = 2,   adjustrowlabels = 0.5,   adjustcolumnlabels = 0.5)+   theme(axis.text.x = element_text(size = 12),         axis.text.y = element_text(size = 12),         axis.title.x = element_text(size = 14),         axis.title.y = element_text(size = 14),         legend.title = element_text(size=14), #change legend title font size         legend.text = element_text(size=12)) ###average contamination rate mean((x - fit1$Ximp)!=0) #> [1] 0.03607143  ###col average max(colMeans((x - fit1$Ximp)!=0)) #> [1] 0.0952381 which.max(colMeans((x - fit1$Ximp)!=0)) #> 236831_at  #>        36  ### row average max(rowMeans((x - fit1$Ximp)!=0)) #> [1] 0.22 which.max(rowMeans((x - fit1$Ximp)!=0)) #> [1] 13"},{"path":"https://pengsu517.github.io/regcell/articles/realdata.html","id":"all-methods-compared","dir":"Articles","previous_headings":"","what":"All methods compared","title":"Bone mineral density data","text":"","code":"##### methods compared mtds = list(   ## spase shooting S, codes arefrom https://github.com/ineswilms/sparse-shooting-S    ## package is available from https://github.com/PengSU517/shootings   # sss = function(y, x){shootings::sparseshooting(x,y)$coef},      ## Rlars, from package robustHD   rlars = function(y, x){regcell::Rlars(y, x)$betahat},       ## MM-Lasso, from https://github.com/esmucler/mmlasso   # mmlasso = function(y,x){mmlasso::mmlasso(x,y)$coef.MMLasso.ad},       ## sparse LTS, from package robustHD   slts = function(y,x){regcell::SLTS(y,x)$betahat},      ## cellwise regularized Lasso without post regression   cell_lasso = function(y,x){      fit = regcell::sregcell_std(y = y, x = x, softbeta = TRUE, lambda_zeta = 1, penal = 1, penaldelta =0)     return(c(fit$intercept_hat, fit$betahat))   },    ## cellwise regularized Lasso with post regression   cell_lasso_post = function(y,x){     fit = regcell::sregcell_std(y = y, x = x, softbeta = TRUE, lambda_zeta = 1, penal = 1, penaldelta =0)     return(c(fit$intercept_hat_post, fit$betahat_post))   },    ## Lasso, from package glmnet   lasso  = function(y,x){      return(regcell::lassocv(y,x)$betahat)   }  )"},{"path":"https://pengsu517.github.io/regcell/articles/realdata.html","id":"analysis-with-artifically-generated-response","dir":"Articles","previous_headings":"","what":"Analysis with artifically generated response","title":"Bone mineral density data","text":"","code":"library(doParallel) registerDoParallel(cores=10) getDoParWorkers()  data(datascreen) x = as.matrix(robustHD::robStandardize(datascreen[,-1])[,1:100]) ximp = cellWise::DDC(x)$Ximp  result <- foreach(mtd = 1:length(mtds),                   .packages = c(\"robustHD\", \"robustbase\" , \"mmlasso\", \"shootings\", \"cellWise\", \"regcell\"))%:%   foreach(pr = c(5,10))%:%   foreach(sigma = c(0.5, 1))%:%   foreach(m = 1:200)%dopar%{     set.seed(m)     error = rnorm(84, sd = sigma)     beta = sample(c(runif(pr, 1, 1.5),rep(0,100-pr)))      y = ximp%*%beta + error     obs = sample(1:84, 17, replace = FALSE)      ytrain = y[-obs]     xtrain = x[-obs,]     ytest = y[obs]     xtest = ximp[obs,]      betahat = mtds[[mtd]](ytrain,xtrain)      tpf<-function(betahat, beta){sum((as.logical(betahat)==as.logical(beta))[which(beta!=0)])}     tnf<-function(betahat,beta){sum((as.logical(betahat)==as.logical(beta))[which(beta==0)])}     tp = tpf(betahat[-1], beta)     tn = tnf(betahat[-1], beta)      res = ytest - betahat[1] - xtest%*%betahat[-1]     mape = mean(abs(res))     rmspe = sqrt(mean(res^2))     rst = c(m = m, mtd = names(mtds)[mtd], pr = pr, sigma = sigma,             tp = tp, tn = tn, rmspe = rmspe, mape = mape)      rst   }   save(result, file = \"result_realdata_artificial.RData\")"},{"path":"https://pengsu517.github.io/regcell/articles/realdata.html","id":"leave-one-out-cross-validation","dir":"Articles","previous_headings":"","what":"Leave-one-out Cross-Validation","title":"Bone mineral density data","text":"","code":"data(datascreen)  y = datascreen[,1] x = as.matrix(robustHD::robStandardize(datascreen[,-1])) result <- foreach(mtd = 1:length(mtds),                   .packages = c(\"robustHD\", \"robustbase\" , \"mmlasso\",\"shootings\", \"cellWise\", \"regcell\"))%:%   foreach(p = c(100))%:%   foreach(obs = 1:84)%dopar%{      set.seed(1)     x = x[,1:p]     ytrain = y[-obs]     xtrain = as.matrix(x[-obs,])     ytest = y[obs]     xtest = x[obs,]      betahat = mtds[[mtd]](ytrain,xtrain)      res = ytest - betahat[1] - sum(xtest*betahat[-1])     rst = c(mtd = names(mtds)[mtd], n = obs, p = p, res = res)      rst   }   save(result, file = \"result_realdata.RData\")"},{"path":"https://pengsu517.github.io/regcell/articles/simu.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"simu","text":"following code utilized running simulations (parallel).","code":"library(doParallel) ####parallel computation registerDoParallel(cores=10) getDoParWorkers()  ###### data generation settings  {   ms = 1:200   # the number of simulations   ns = c(200) # sample size   ps = c(50) # num of candidate predictors   prs = c(10) # number of informative candidata predictors   es = c(0, 0.02, 0.05) # contamination rates   rs = c(0.5) # correlation among predictors   gammas = c(0, 2, 4, 6, 8) # magnitude of outlyingness   # sigmas = c(2) # variance of residuals, not used   dfs = c(4, Inf) # degrees of freedom generating predictors   outtypes = c(\"cellwise\") # types of contamination }    ##### methods compared mtds = list(   ## spase shooting S, codes arefrom https://github.com/ineswilms/sparse-shooting-S    ## package is available from https://github.com/PengSU517/shootings   # sss = function(y, x){shootings::sparseshooting(x,y)$coef},      ## Rlars, from package robustHD   rlars = function(y, x){regcell::Rlars(y, x)$betahat},       ## MM-Lasso, from https://github.com/esmucler/mmlasso   # mmlasso = function(y,x){mmlasso::mmlasso(x,y)$coef.MMLasso.ad},       ## sparse LTS, from package robustHD, an alternative using BIC is regcell::SLTS   slts = function(y,x){robustHD::sparseLTS(x,y)$coefficients},      ## cellwise regularized Lasso without post regression   cell_lasso = function(y,x){      fit = regcell::sregcell_std(y = y, x = x)     return(c(fit$intercept_hat, fit$betahat))   },    ## cellwise regularized Lasso with post regression   cell_lasso_post = function(y,x){     fit = regcell::sregcell_std(y = y, x = x)     return(c(fit$intercept_hat_post, fit$betahat_post))   },    ## Lasso, from package glmnet   lasso  = function(y,x){      return(regcell::lassocv(y,x)$betahat)   }  )  {   result <- foreach(m = ms,                     .packages = c(\"robustHD\", \"robustbase\" , \"mmlasso\",\"shootings\", \"cellWise\", \"regcell\"))%:%     foreach(n = ns)%:%     foreach(p = ps)%:%     foreach(pr = prs)%:%     foreach(e = es)%:%     foreach(r = rs)%:%     foreach(gamma = gammas)%:%     # foreach(sigma = sigmas)%:%     foreach(df = dfs)%:%     foreach(outtype = outtypes)%dopar% {        {         seed = m         set.seed(seed = seed) ##set random seed         beta = c(rep(1,pr),rep(0,p-pr))#*c(1,-1)  ###set beta         dataset = regcell::genevar(n = n, p = p, e = e, r = r, beta = beta,intercept = 1,                                    gamma = gamma, df = df, outtype = outtype, sigma = 3,                                    mux = rep(0,p), scalex = 1) ##generate datasets         x  = dataset$x # the clean design matrix         xc = dataset$xc # the contaminated design matrix         y  = dataset$y # the response         ynew = dataset$ynew # # another response vector for calculating prediction errors       }        rst = list()       if(((e!=0)&(gamma!=0))|((e==0)&(gamma==0))){         for (mtd in 1:length(mtds)) {           rst[[mtd]]=rep(NA, 27)           try({             timing  = system.time({betahat = mtds[[mtd]](y,x)})[\"elapsed\"] ##calculate time consuming             mspe = mean((ynew - cbind(1,xc)%*%betahat)^2) #mean squared prediction error             mape = mean(abs(ynew - cbind(1,xc)%*%betahat)) # mean absolute prediction error             rtmspe = sqrt(mean(sort((ynew - cbind(1,xc)%*%betahat)^2)[1:(0.9*n)]))## root of trimed mspe               tpf<-function(betahat, beta){sum((as.logical(betahat)==as.logical(beta))[1:pr])}              tnf<-function(betahat,beta){sum((as.logical(betahat)==as.logical(beta))[-(1:pr)])}              tp = tpf(betahat[-1], beta) # true positive rate             tn = tnf(betahat[-1], beta) # true negative rate              rst[[mtd]] = c(m = m, n = n, p = p, pr = pr, e = e, r = r,                            gamma = gamma, outtype = outtype, df = df,                            method = names(mtds)[mtd], seed =seed,                            MSPE= mspe, MAPE = mape, RTMSPE = rtmspe,                            TP = tp, FP = (p-pr)-tn, Time = timing, betahat[2:11])           }, TRUE           )          }       }else{         rst[[1]] = rep(NA,27)       }       rst     }    save(result, file = \"result_simu.RData\") }"},{"path":"https://pengsu517.github.io/regcell/articles/simu.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"simu","text":"following code employed analyze generated results.","code":"result1 = as.data.frame(t(as.data.frame(result))) names(result1) = c(\"m\", \"n\", \"p\", \"pr\", \"e\", \"r\", \"gamma\", \"outtype\", \"df\", \"method\", \"seed\",                         \"MSPE\", \"MAPE\", \"RTMSPE\", \"TP\", \"FP\", \"Time\", paste(\"betahat\", 1:10))  result2 = result1 %>% mutate(across(c(1:7,9, 11:21), as.numeric),                               across(5:11, as.factor),                               TN = p-pr-FP,                              FN = pr - TP,                              BACC = (TP/pr + TN/(p-pr))/2,                              F1 = 2*TP/(2*TP + FP + FN),                              RMSPE = sqrt(MSPE))  levels(result2$e) = c(\"e = 0%\", \"e = 2%\", \"e = 5%\") levels(result2$df) = c(\"t(4)\", \"Normal\") result2$df = factor(result2$df, levels = c(\"Normal\" ,\"t(4)\" ))  levels(result2$gamma) = c(\" \", \"2\", \"4\", \"6\", \"8\")  levels(result2$method) = c(\"CR-Lasso\", \"Lasso\", \"MM-Lasso\", \"RLars\", \"SLTS\", \"SSS\") result2$method = factor(result2$method, levels = c(\"CR-Lasso\", \"SSS\", \"RLars\", \"MM-Lasso\", \"SLTS\", \"Lasso\")) result2 = result2[complete.cases(result2),] result3 = result2 %>% filter((p==50)) colorset = c(\"CR-Lasso\" =\"#F8766D\",              \"SSS\" = \"#C49A00\",              \"RLars\" = \"#53B400\",              \"MM-Lasso\" = \"#00C094\",               \"SLTS\" = \"#00B6EB\",             \"Lasso\" = \"#A58AFF\")  p1 = ggplot(data = result3)+   geom_boxplot(aes(fill = method, x = gamma, y = RMSPE),outlier.size = 0.2, lwd = 0.4)+   facet_grid(df~e, scales = \"free\", space = \"free_x\") +   scale_fill_manual(values = colorset)+   theme_bw()+   labs(x = expression(gamma*\": magnitude of outlyingness\"))+      theme(text= element_text(size=20),          #axis.text.x = element_blank(),         legend.position = \"bottom\") p1 summary = result3 %>% group_by(n,p, pr,e,r,gamma, df, method,outtype) %>% summarise(   TP = mean(TP, na.rm = T),   FP = mean(FP, na.rm = T),   TPR = mean(TP/pr, na.rm = T),   FPR = mean(FP/(p-pr), na.rm = T),   TNR = 1-FPR,   BACC = mean(BACC),   F1 = mean(F1)) p2 = ggplot(data = summary, aes(x = gamma, y = F1, group = method))+   geom_point(aes(color = method))+   geom_line(aes(linetype = method, color = method))+    facet_grid(df~e, scales = \"free\", space = \"free_x\") +   ylim(0,1)+   theme_bw()+   labs(x = expression(gamma*\": magnitude of outlyingness\"),         y = expression(F[1]))+   theme(text= element_text(size=20),          legend.position = \"bottom\") p2"},{"path":"https://pengsu517.github.io/regcell/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peng Su. Author, maintainer. Garth Tarr. Author. Samuel Muller. Author. Suojin Wang. Author.","code":""},{"path":"https://pengsu517.github.io/regcell/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Su P, Tarr G, Muller S, Wang S (2024). regcell: Cellwise regularized robust sparse regression. R package version 1.0, https://pengsu517.github.io/regcell/.","code":"@Manual{,   title = {regcell: Cellwise regularized robust sparse regression},   author = {Peng Su and Garth Tarr and Samuel Muller and Suojin Wang},   year = {2024},   note = {R package version 1.0},   url = {https://pengsu517.github.io/regcell/}, }"},{"path":"https://pengsu517.github.io/regcell/index.html","id":"cr-lasso-robust-cellwise-regularized-sparse-regression","dir":"","previous_headings":"","what":"Cellwise regularized robust sparse regression","title":"Cellwise regularized robust sparse regression","text":"regcell package provides functions compute CR-Lasso (cellwise regularized Lasso) proposed Peng Su, Samuel Muller, Garth Tarr Suojin Wang. manuscript can found . included demonstration (demo), simulation demonstration (simu) real data demonstration (realdata) vignettes. also created online R repository example scripts.","code":""},{"path":"https://pengsu517.github.io/regcell/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cellwise regularized robust sparse regression","text":"can install package using: macOS users, may see error related gfortran installing: happens, please install GNU Fortran compiler page: https://mac.r-project.org/tools/ (example, direct link gfortran-12.2-universal.pkg) try","code":"remotes::install_github(\"PengSU517/regcell\", build = FALSE) ld: warning: search path '/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0' not found ld: warning: search path '/opt/gfortran/lib' not found ld: library 'gfortran' not found clang: error: linker command failed with exit code 1 (use -v to see invocation) make: *** [regcell.so] Error 1 ERROR: compilation failed for package ‘regcell’ remotes::install_github(\"PengSU517/regcell\", build = TRUE)"},{"path":"https://pengsu517.github.io/regcell/reference/Rlars.html","id":null,"dir":"Reference","previous_headings":"","what":"robust Lars — Rlars","title":"robust Lars — Rlars","text":"robust Lars","code":""},{"path":"https://pengsu517.github.io/regcell/reference/Rlars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"robust Lars — Rlars","text":"","code":"Rlars(y, x)"},{"path":"https://pengsu517.github.io/regcell/reference/Rlars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"robust Lars — Rlars","text":"y response x design matrix","code":""},{"path":"https://pengsu517.github.io/regcell/reference/Rlars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"robust Lars — Rlars","text":"betahat: estimated beta sigmahat: estimated scale res: residuals","code":""},{"path":"https://pengsu517.github.io/regcell/reference/Rlars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"robust Lars — Rlars","text":"","code":"data = genevar() y = data$y x = data$x fit = Rlars(y,x)"},{"path":"https://pengsu517.github.io/regcell/reference/genevar.html","id":null,"dir":"Reference","previous_headings":"","what":"generate simulated datasets — genevar","title":"generate simulated datasets — genevar","text":"generate simulated datasets","code":""},{"path":"https://pengsu517.github.io/regcell/reference/genevar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate simulated datasets — genevar","text":"","code":"genevar(   n = 100,   p = 10,   pr = 5,   e = 0,   r = 0.5,   df = Inf,   beta = NULL,   intercept = 0,   sigma = 1,   mux = rep(0, p),   scalex = 1,   gamma = 6,   outtype = \"mixed\" )"},{"path":"https://pengsu517.github.io/regcell/reference/genevar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate simulated datasets — genevar","text":"n number obs p number predictors pr number active predictors e contamination rate r correlation predictors df degrees freedom predictors beta regression coefficients intercept intercept regression model sigma scale error item mux averages predictors scalex scales predictors gamma magnitudes outliers outtype type outliers: cellwise, rowwise mixed","code":""},{"path":"https://pengsu517.github.io/regcell/reference/genevar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate simulated datasets — genevar","text":"x: design matrix xc: clean design matrix y: response ynew: another response (independent test set)","code":""},{"path":"https://pengsu517.github.io/regcell/reference/genevar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate simulated datasets — genevar","text":"","code":"data = genevar() y = data$y x = data$x"},{"path":"https://pengsu517.github.io/regcell/reference/lassocv.html","id":null,"dir":"Reference","previous_headings":"","what":"Lasso with cross validation — lassocv","title":"Lasso with cross validation — lassocv","text":"Lasso cross validation","code":""},{"path":"https://pengsu517.github.io/regcell/reference/lassocv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lasso with cross validation — lassocv","text":"","code":"lassocv(y, x)"},{"path":"https://pengsu517.github.io/regcell/reference/lassocv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lasso with cross validation — lassocv","text":"y response x design matrix","code":""},{"path":"https://pengsu517.github.io/regcell/reference/lassocv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lasso with cross validation — lassocv","text":"betahat: estimated regression coefficient vector","code":""},{"path":"https://pengsu517.github.io/regcell/reference/lassocv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lasso with cross validation — lassocv","text":"","code":"data = genevar() y = data$y x = data$x fit = lassocv(y,x)"},{"path":"https://pengsu517.github.io/regcell/reference/regcell-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Cellwise regularized robust sparse regression — regcell-package","title":"Cellwise regularized robust sparse regression — regcell-package","text":"Sparse regression cellwise contamination","code":""},{"path":"https://pengsu517.github.io/regcell/reference/regcell-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cellwise regularized robust sparse regression — regcell-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.  robust sparse regression cellwise contamination","code":""},{"path":"https://pengsu517.github.io/regcell/reference/regcell-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cellwise regularized robust sparse regression — regcell-package","text":"NA Maintainer: Peng SU <peng.su@sydney.edu.au>","code":""},{"path":"https://pengsu517.github.io/regcell/reference/regcell-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cellwise regularized robust sparse regression — regcell-package","text":"arxiv soon","code":""},{"path":[]},{"path":"https://pengsu517.github.io/regcell/reference/regcell-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cellwise regularized robust sparse regression — regcell-package","text":"","code":"data = genevar() y = data$y x = data$x fit = sregcell_std(y,x)"},{"path":"https://pengsu517.github.io/regcell/reference/sregcell.html","id":null,"dir":"Reference","previous_headings":"","what":"robust sparse regression under cellwise contaminaton (with a grid of lambdas) — sregcell","title":"robust sparse regression under cellwise contaminaton (with a grid of lambdas) — sregcell","text":"robust sparse regression cellwise contaminaton (grid lambdas)","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"robust sparse regression under cellwise contaminaton (with a grid of lambdas) — sregcell","text":"","code":"sregcell(   y,   x,   betahat = NULL,   intercept = NULL,   softbeta = TRUE,   softdelta = TRUE,   softzeta = TRUE,   lambda_delta = 2.56,   lambda_zeta = 2.56,   alpha = 0.5,   penal = 1,   penaldelta = 1,   maxiter = 100 )"},{"path":"https://pengsu517.github.io/regcell/reference/sregcell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"robust sparse regression under cellwise contaminaton (with a grid of lambdas) — sregcell","text":"y response x design matrix betahat initial estimate beta intercept initial estimate intercept softbeta whether use soft/hard threshold beta softdelta whether use soft/hard threshold delta(outliers x) softzeta whether use soft/hard threshold zeta(outliers y) lambda_delta tuning parameter delta lambda_zeta tuning parameter zeta alpha importance factor regression loss (0-1, default 0.5) penal penalty parameter model selection (default 1, equivalent BIC ) penaldelta penalty number detected outliers (debug, default 0) maxiter number interations","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"robust sparse regression under cellwise contaminaton (with a grid of lambdas) — sregcell","text":"betahat: estimated beta intercept_hat: estiamted intercept betahat_opt: estimated beta post-cellwise-robust regression intercept_opt: estimated intercept post-cellwise-robust regression","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"robust sparse regression under cellwise contaminaton (with a grid of lambdas) — sregcell","text":"","code":"data = genevar() y = data$y x = data$x fit = sregcell(y,x)"},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Cellwise regularized robust sparse regression (with a specific lambda) — sregcell_lambda","title":"Cellwise regularized robust sparse regression (with a specific lambda) — sregcell_lambda","text":"Cellwise regularized robust sparse regression (specific lambda)","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cellwise regularized robust sparse regression (with a specific lambda) — sregcell_lambda","text":"","code":"sregcell_lambda(   y,   x,   softbeta = TRUE,   softdelta = TRUE,   softzeta = TRUE,   lambda_delta = 2.56,   lambda_zeta = 2.56,   lambda = 0,   alpha = 0.5,   maxiter = 100 )"},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cellwise regularized robust sparse regression (with a specific lambda) — sregcell_lambda","text":"y response x design matrix softbeta whether use soft/hard threshold beta softdelta whether use soft/hard threshold delta(outliers x) softzeta whether use soft/hard threshold zeta(outliers y) lambda_delta tuning parameter delta lambda_zeta tuning parameter zeta lambda tuning parameter beta alpha importance factor regression loss (0-1, default 0.5) maxiter number interations","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cellwise regularized robust sparse regression (with a specific lambda) — sregcell_lambda","text":"fit","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cellwise regularized robust sparse regression (with a specific lambda) — sregcell_lambda","text":"","code":"data = genevar() y = data$y x = data$x fit = sregcell_lambda(y,x, lambda = 1)"},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_std.html","id":null,"dir":"Reference","previous_headings":"","what":"robust sparse regression under cellwise contamination with a grid of lambdas (standardize predictors first) — sregcell_std","title":"robust sparse regression under cellwise contamination with a grid of lambdas (standardize predictors first) — sregcell_std","text":"robust sparse regression cellwise contamination grid lambdas (standardize predictors first)","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"robust sparse regression under cellwise contamination with a grid of lambdas (standardize predictors first) — sregcell_std","text":"","code":"sregcell_std(   y,   x,   scale.method = qnscale,   df = Inf,   softbeta = TRUE,   softdelta = TRUE,   softzeta = TRUE,   lambda_delta = NULL,   lambda_zeta = 1,   prob = 0.995,   alpha = 0.5,   penal = 1,   penaldelta = 0,   maxiter = 100 )"},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"robust sparse regression under cellwise contamination with a grid of lambdas (standardize predictors first) — sregcell_std","text":"y response x design matrix scale.method method used obtain robust scales, default qn df degrees freedom assumed distribution softbeta whether use soft/hard threshold beta softdelta whether use soft/hard threshold delta(outliers x) softzeta whether use soft/hard threshold zeta(outliers y) lambda_delta tuning parameter delta lambda_zeta tuning parameter zeta prob probability quantiles, default 0.995 penal penalty parameter model selection (default 1, equivalent BIC ) penaldelta penalty number detected outliers (debug, default 0) maxiter number interations importance factor regression loss (0-1, default 0.5)","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"robust sparse regression under cellwise contamination with a grid of lambdas (standardize predictors first) — sregcell_std","text":"betahat: estimated beta intercept_hat: estiamted intercept betahat_opt: estimated beta post-cellwise-robust regression intercept_opt: estimated intercept post-cellwise-robust regression","code":""},{"path":"https://pengsu517.github.io/regcell/reference/sregcell_std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"robust sparse regression under cellwise contamination with a grid of lambdas (standardize predictors first) — sregcell_std","text":"","code":"data = genevar() y = data$y x = data$x fit = sregcell_std(y,x)"}]
